{"version":3,"file":"component---src-pages-music-tsx-1790b0a0f21fb25e42b3.js","mappings":"0MAUA,EARYA,EAAAA,QAAAA,KAAAA,WAAH,mDAAGA,CAAH,0H,oBCaHC,EAA0C,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IAChDC,GAAOC,EAAAA,EAAAA,gBAAc,YAiBrBC,GAAQC,EAAAA,EAAAA,UAAQ,WACpB,IAAMC,EAAaJ,EAAKK,cAAcC,MAAMC,MAC1C,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,KAAOZ,CAArB,IAEN,OAAOM,aAAP,EAAOA,EAAYK,KAAKE,eACzB,GAAE,CAACb,EAAKE,EAAKK,cAAcC,QAE5B,OACE,gBAACM,EAAD,KACE,gBAACC,EAAD,KACE,gBAAC,EAAAC,EAAD,CAAaZ,MAAOA,EAAOa,QAAQ,QAAQhB,IAAKA,QAAAA,EA9BpC,qBAkCnB,EAEYa,EAAmBhB,EAAAA,QAAAA,IAAAA,WAAH,wEAAGA,CAAH,gMAiBvBiB,EAAejB,EAAAA,QAAAA,IAAAA,WAAH,oEAAGA,CAAH,sBAIlB,EAAeoB,EAAAA,KAAWnB,G,UCvDpBoB,EAA4B,SAAC,GAQ5B,IAAD,EAPJC,EAOI,EAPJA,UACAnB,EAMI,EANJA,IACAoB,EAKI,EALJA,SACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,KACAC,EACI,EADJA,KAEMC,EAAiB,UAAGC,EAAAA,EAAAA,MAAa,SAAAC,GAAM,OAAIA,EAAOC,OAASR,CAApB,WAAtB,aAAG,EAAkDS,YACtEC,EAAcN,EAAKO,KAAI,SAAAC,GAAG,UAAQA,CAAR,IAAeC,KAAK,KACpD,OACE,gBAACC,EAAD,KACE,gBAAC,EAAD,CAAanC,IAAKoB,EAAWnB,IAAKA,IAClC,gBAACmC,EAAD,KACE,2BACE,gBAAC,IAAD,KAAWV,GACX,gBAAC,EAAD,KAAMK,GACN,gBAACM,EAAD,KAAQf,GACR,gBAACgB,EAAD,KAAOf,IAET,gBAAC,IAAD,CAAUgB,SAAUf,GAAOA,IAIlC,EAEKW,EAAUrC,EAAAA,QAAAA,IAAAA,WAAH,wDAAGA,CAAH,0LAaPsC,EAAOtC,EAAAA,QAAAA,IAAAA,WAAH,qDAAGA,CAAH,mIAYJuC,EAAQvC,EAAAA,QAAAA,GAAAA,WAAH,sDAAGA,CAAH,4MAMY,qBAAG0C,MAAkBC,OAAOC,EAA5B,IAIA,qBAAGF,MAAkBC,OAAOE,EAA5B,IAKjBL,EAAOxC,EAAAA,QAAAA,EAAAA,WAAH,qDAAGA,CAAH,iOChFV,ED6FeoB,EAAAA,KAAWC,G,UE3B1B,EAzD0B,SAAC,GAKI,IAJ7ByB,EAI4B,EAJ5BA,MACAC,EAG4B,EAH5BA,cAG4B,IAF5BC,WAAAA,OAE4B,MAFf,GAEe,MAD5BC,QAAAA,OAC4B,MADlB,IACkB,EAC5B,GAA8BC,EAAAA,EAAAA,WAAS,GAAhCC,EAAP,KAAgBC,EAAhB,KACA,GAAsCF,EAAAA,EAAAA,UAAiB,IAAhDG,EAAP,KAAoBC,EAApB,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAApCK,EAAP,KAAkBC,EAAlB,KACA,GAA8CN,EAAAA,EAAAA,WAAS,GAAhDO,EAAP,KAAwBC,EAAxB,KAEMC,GAAWC,EAAAA,EAAAA,UA2CjB,OAzCAC,EAAAA,EAAAA,kBAAgB,WACTf,EAAMgB,SAAUP,IACrBH,EAAWN,EAAMgB,OAASd,GAC1BM,GAAe,OAAIR,EAAMiB,MAAM,EAAGf,KAClCQ,GAAa,GACd,GAAE,CAACD,EAAWT,EAAOE,KAEtBgB,EAAAA,EAAAA,YAAU,WACR,IAUMC,EAAiBlB,EAAcmB,QAE/BC,EAAS,CACbC,WAAW,WAAYnB,EAAb,SACVoB,UAAW,CAAC,IAgBd,OAbAV,EAASO,QAAU,IAAII,sBAAqB,SAAAC,GACrCpB,GACLoB,EAAQC,SAAQ,SAAAC,GAnBA,IACVC,EACAC,EACAC,EAiBCnB,EAIDgB,EAAMI,iBAvBNH,EAAgBrB,EAAYS,OAC5Ba,EAAOD,EAAgB5B,EAAMgB,OAC7Bc,EAAYD,EACd7B,EAAMiB,MAAMW,EAAeA,EAAgB1B,GAC3C,GACJI,EAAWuB,GACXrB,EAAe,GAAD,eAAKD,IAAL,OAAqBuB,MAc/BlB,GAAmB,EAItB,GACF,GAAES,GAEHR,EAASO,QAAQY,QAAQb,GAElB,kBAAMN,EAASO,SAAWP,EAASO,QAAQa,YAA3C,CACR,IAEM1B,CACR,EClBK2B,EAAOhF,EAAAA,QAAAA,GAAAA,WAAH,0DAAGA,CAAH,+KAUa,qBAAG0C,MAAkBC,OAAOE,EAA5B,IAKjBoC,EAAOjF,EAAAA,QAAAA,GAAAA,WAAH,0DAAGA,CAAH,iTASEgB,EAAoCA,GAezB,qBAAG0B,MAAkBC,OAAOE,EAA5B,ICrFvB,EDW0C,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrCC,GAAgBa,EAAAA,EAAAA,QAAuB,MACvCP,EAAc6B,EAAkB,CACpCpC,MAAAA,EACAC,cAAAA,EACAC,WAAY,GACZC,QAAS,MAGX,OACE,gBAAC+B,EAAD,CAAMG,KAAK,QACR9B,EAAYnB,KAAI,SAAA9B,GACf,IAAQU,EAAgEV,EAAhEU,GAAIsE,EAA4DhF,EAA5DgF,KAAM5D,EAAsDpB,EAAtDoB,MAAOC,EAA+CrB,EAA/CqB,KAAMC,EAAyCtB,EAAzCsB,KAAMH,EAAmCnB,EAAnCmB,SAAUI,EAAyBvB,EAAzBuB,KAAML,EAAmBlB,EAAnBkB,UAAWnB,EAAQC,EAARD,IAC1DkF,EAAe7D,EAAN,MAAiBD,EAAjB,gBAAyCG,EACxD,OACE,gBAACuD,EAAD,CAAMK,IAAKxE,EAAIqE,KAAK,YAClB,gBAAC,EAAAI,KAAD,CAAMC,GAAIJ,QAAAA,EAAQ,GAAI,aAAYC,GAChC,gBAAC,EAAD,CACE/D,UAAWA,EACXnB,IAAKA,EACLoB,SAAUA,EACVC,MAAOA,EACPC,KAAMA,EACNC,KAAMA,EACNC,KAAMA,KAKf,IACD,uBAAK8D,IAAK1C,IAGf,C,yGEND,EAjCwB,SAAC,GAA6C,IAA3C0C,EAA0C,EAA1CA,IAAKC,EAAqC,EAArCA,UAC9B7B,EAAAA,EAAAA,kBAAgB,WACd,IAAM8B,EAAiBF,EAAIvB,QAE3B,GAAKyB,GAKHA,EAAeC,aAAeD,EAAeE,YAE/C,CAIA,IAAMC,EAAmBH,EAAeI,cAAf,IACnBL,GAGN,GAAKI,EAAL,CAIA,IAAME,EAAUF,EAAiBG,WAAaN,EAAeM,WAC7DN,EAAeO,SACbF,EACEL,EAAeE,YAAc,EAC7BC,EAAiBD,YAAc,EACjC,EAPD,CARA,CAiBF,GAAE,CAACJ,EAAKC,GACV,EC7BKS,EAAS,SA6CTC,EAAMpG,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,6QAac,qBAAG0C,MAAkBC,OAAOE,EAA5B,IAKjBwD,EAAWrG,EAAAA,QAAAA,GAAAA,WAAH,+DAAGA,CAAH,yUAaS,qBAAG0C,MAAkBC,OAAOE,EAA5B,IAUjByD,GAAYtG,EAAAA,EAAAA,SAAOuF,EAAAA,MAAV,2EAAGvF,CAAH,mYAwBTuG,EAAUvG,EAAAA,QAAAA,IAAAA,WAAH,8DAAGA,CAAH,uHAQPwG,EAAQxG,EAAAA,QAAAA,GAAAA,WAAH,4DAAGA,CAAH,yHC7HX,EDgB4C,SAAC,GAA0B,IAAxByG,EAAwB,EAAxBA,QAASlF,EAAe,EAAfA,SAChDmF,GAAS9C,EAAAA,EAAAA,QAAyB,MAElC+C,EAA4B,SAAC,GAAD,SAAGC,UACvB,CAAE9F,GAAIqF,EAAQU,UAAW,GAAM,CAAC,CADZ,EAKlC,OAFAC,EAAgB,CAAErB,IAAKiB,EAAQhB,SAAUS,IAGvC,gBAACC,EAAD,CAAK,aAAW,cACd,gBAACC,EAAD,aACA,gBAACC,EAAD,CAAWS,SAAUJ,EAAUnB,GAAE,IAAMjE,EAAN,KAThB,MAYjB,gBAACgF,EAAD,MACA,gBAACC,EAAD,CAAOf,IAAKiB,EAAQM,UAAU,uBAC3BP,EACEQ,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,WAAaF,EAAEE,UAA3B,IACLlF,KAAI,SAAAC,GACH,IAAQkF,EAAelF,EAAfkF,WACR,OACE,sBAAI/B,IAAK+B,GACP,gBAACf,EAAD,CACES,SAAUJ,EACVnB,GAAE,IAAMjE,EAAN,QAAsB+F,IAAUD,GAAhC,KAEDA,GAIR,KAIV,C,+GEgBKE,EAAOvH,EAAAA,QAAAA,KAAAA,WAAH,uDAAGA,CAAH,4IAMJwH,EAAUxH,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,8MAQU,qBAAG0C,MAAkBC,OAAOE,EAA5B,IAMjB4E,EAAYzH,EAAAA,QAAAA,GAAAA,WAAH,4DAAGA,CAAH,4JAMQ,qBAAG0C,MAAkBC,OAAOE,EAA5B,IA2CvB,UA5Ha,SAAC,GAGsC,IAFlD6E,EAEiD,EAFjDA,YACAtH,EACiD,EADjDA,KAEA,GAA0B8C,EAAAA,EAAAA,UAAiB,IAApCJ,EAAP,KAAc6E,EAAd,KACMC,EAAaF,EAAYvF,IACzB0F,EAAWzH,EAAK0H,kBAAkBpH,OAExCmD,EAAAA,EAAAA,kBAAgB,YACW+D,EACrBC,EAASE,QACP,kBAAGlH,EAAH,EAAGA,KAAH,OAAcA,SAAd,UAAcA,EAAMmH,mBAApB,aAAc,EAAmBrG,KAAKsG,SAASL,EAA/C,IAEFC,GAEarD,SAAQ,YAAe,IAAZ3D,EAAW,EAAXA,KAClBC,EAAOD,EAAPC,GACAsE,GAASvE,aAAjB,EAAiBA,EAAMqH,QAAf9C,KACR,EAA8DvE,aAA9D,EAA8DA,EAAMmH,YAA5DxG,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,KAAMH,EAA3B,EAA2BA,SAAUI,EAArC,EAAqCA,KAAML,EAA3C,EAA2CA,UAAWnB,EAAtD,EAAsDA,IAC9CgI,EAAoB7G,EAApB6G,gBAERR,GAAS,SAAAS,GAAQ,wBACZA,GADY,CAEf,CACEtH,GAAAA,EACAsE,KAAAA,EACA5D,MAAAA,EACAC,KAAAA,EACAC,KAAAA,EACAH,SAAAA,EACAI,KAAAA,EACAL,UAAW6G,aAAF,EAAEA,EAAiBrH,GAC5BX,IAAAA,IAXa,GAclB,GACF,GAAE,CAACyH,EAAYC,KAEHQ,EAAAA,EAAAA,KAAb,IACMC,EAAYV,EAElB,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKpG,MAAM,SACX,gBAAC+F,EAAD,KACE,gBAACC,EAAD,KACE,gBAAC,IAAD,CAAWf,QAASrG,EAAK0H,kBAAkBS,MAAOhH,SAAS,UAC3D,gBAACkG,EAAD,KAAYa,GACZ,gBAAC,IAAD,CAAUxF,MAAOA,MAK1B,C","sources":["webpack://gatsby-starter-apple/./src/styles/tag.ts","webpack://gatsby-starter-apple/./src/components/postGrid/card/centeredImg.tsx","webpack://gatsby-starter-apple/./src/components/postGrid/card/card.tsx","webpack://gatsby-starter-apple/./src/components/postGrid/card/index.ts","webpack://gatsby-starter-apple/./src/components/postGrid/useInfiniteScroll.ts","webpack://gatsby-starter-apple/./src/components/postGrid/postGrid.tsx","webpack://gatsby-starter-apple/./src/components/postGrid/index.ts","webpack://gatsby-starter-apple/./src/components/tagFilter/useScrollCenter.ts","webpack://gatsby-starter-apple/./src/components/tagFilter/tagFilter.tsx","webpack://gatsby-starter-apple/./src/components/tagFilter/index.ts","webpack://gatsby-starter-apple/./src/pages/music.tsx"],"sourcesContent":["import styled from \"styled-components\"\n\nconst Tag = styled.span`\n  display: block;\n  font-size: 0.875rem;\n  font-weight: var(--font-weight-semi-bold);\n  color: var(--color-text-3);\n  line-height: 1.5;\n`\n\nexport default Tag\n","import React, { useMemo } from \"react\"\nimport styled from \"styled-components\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport type { IGatsbyImageData } from \"gatsby-plugin-image\"\n\nimport type { Query } from \"Types/GraphQL\"\nimport type Post from \"Types/Post\"\n\ninterface CenteredImgProps extends Pick<Post, \"alt\"> {\n  src: Post[\"thumbnail\"]\n}\n\nconst DEFAULT_ALT = \"Thumbnail Image\"\n\nconst CenteredImg: React.FC<CenteredImgProps> = ({ src, alt }) => {\n  const data = useStaticQuery<Query>(graphql`\n    query {\n      allImageSharp {\n        edges {\n          node {\n            id\n            gatsbyImageData(\n              layout: CONSTRAINED\n              aspectRatio: 1.77\n              placeholder: BLURRED\n            )\n          }\n        }\n      }\n    }\n  `)\n\n  const image = useMemo(() => {\n    const imageSharp = data.allImageSharp.edges.find(\n      edge => edge.node.id === src\n    )\n    return imageSharp?.node.gatsbyImageData as IGatsbyImageData\n  }, [src, data.allImageSharp.edges])\n\n  return (\n    <ThumbnailWrapper>\n      <InnerWrapper>\n        <GatsbyImage image={image} loading=\"eager\" alt={alt ?? DEFAULT_ALT} />\n      </InnerWrapper>\n    </ThumbnailWrapper>\n  )\n}\n\nexport const ThumbnailWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  &::after {\n    content: \"\";\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0;\n    background-color: var(--color-dimmed);\n    transition: 0.3s ease;\n  }\n`\n\nconst InnerWrapper = styled.div`\n  overflow: hidden;\n`\n\nexport default React.memo(CenteredImg)\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nimport type Post from \"Types/Post\"\nimport Category from \"Styles/category\"\nimport Tag from \"Styles/tag\"\nimport DateTime from \"Styles/dateTime\"\nimport CenteredImg from \"./centeredImg\"\nimport { DOMAINS } from \"Constants/domain\"\n\ntype CardProps = Pick<\n  Post,\n  \"thumbnail\" | \"alt\" | \"category\" | \"title\" | \"desc\" | \"date\" | \"tags\"\n>\n\nconst Card: React.FC<CardProps> = ({\n  thumbnail,\n  alt,\n  category,\n  title,\n  desc,\n  date,\n  tags,\n}) => {\n  const domainDescription = DOMAINS.find(domain => domain.name === category)?.description\n  const tagsDisplay = tags.map(tag => `#${tag}`).join(\" \");\n  return (\n    <Wrapper>\n      <CenteredImg src={thumbnail} alt={alt} />\n      <Text>\n        <div>\n          <Category>{domainDescription}</Category>\n          <Tag>{tagsDisplay}</Tag>\n          <Title>{title}</Title>\n          <Desc>{desc}</Desc>\n        </div>\n        <DateTime dateTime={date}>{date}</DateTime>\n      </Text>\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  height: 100%;\n  border-radius: var(--border-radius-base);\n  background-color: var(--color-card);\n\n  /* Fix Safari overflow:hidden with border radius not working error */\n  transform: translateZ(0);\n`\n\nconst Text = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  justify-content: space-between;\n  padding: var(--sizing-md);\n\n  & > * {\n    display: block;\n  }\n`\n\nconst Title = styled.h3`\n  margin-top: var(--sizing-xs);\n  font-size: var(--text-lg);\n  font-weight: var(--font-weight-bold);\n  line-height: 1.3;\n\n  @media (max-width: ${({ theme }) => theme.device.md}) {\n    font-size: 1.3125rem;\n  }\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    font-size: var(--text-md);\n  }\n`\n\nconst Desc = styled.p`\n  line-height: 1.5;\n  margin-top: 8px;\n  padding-bottom: var(--sizing-sm);\n  color: var(--color-text-2);\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  word-break: break-word;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nexport default React.memo(Card)\n","import Card from \"./card\"\n\nexport default Card\n","import { useState, useEffect, useLayoutEffect, useRef } from \"react\"\n\nimport type Post from \"Types/Post\"\n\ninterface UseInfiniteScrollProps {\n  posts: Post[]\n  scrollEdgeRef: React.RefObject<HTMLDivElement>\n  maxPostNum: number\n  offsetY: number\n}\n\nconst useInfiniteScroll = ({\n  posts,\n  scrollEdgeRef,\n  maxPostNum = 10,\n  offsetY = 400,\n}: UseInfiniteScrollProps) => {\n  const [hasMore, setHasMore] = useState(false)\n  const [currentList, setCurrentList] = useState<Post[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [observerLoading, setObserverLoading] = useState(false)\n\n  const observer = useRef<IntersectionObserver>()\n\n  useLayoutEffect(() => {\n    if (!posts.length || isLoading) return\n    setHasMore(posts.length > maxPostNum)\n    setCurrentList([...posts.slice(0, maxPostNum)])\n    setIsLoading(true)\n  }, [isLoading, posts, maxPostNum])\n\n  useEffect(() => {\n    const loadEdges = () => {\n      const currentLength = currentList.length\n      const more = currentLength < posts.length\n      const nextEdges = more\n        ? posts.slice(currentLength, currentLength + maxPostNum)\n        : []\n      setHasMore(more)\n      setCurrentList([...currentList, ...nextEdges])\n    }\n\n    const scrollEdgeElem = scrollEdgeRef.current\n\n    const option = {\n      rootMargin: `0px 0px ${offsetY}px 0px`,\n      threshold: [0],\n    }\n\n    observer.current = new IntersectionObserver(entries => {\n      if (!hasMore) return\n      entries.forEach(entry => {\n        if (!observerLoading) {\n          setObserverLoading(true)\n          return\n        }\n        if (entry.isIntersecting) loadEdges()\n      })\n    }, option)\n\n    observer.current.observe(scrollEdgeElem!)\n\n    return () => observer.current && observer.current.disconnect()\n  })\n\n  return currentList\n}\n\nexport default useInfiniteScroll\n","import React, { useRef } from \"react\"\nimport { Link } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport type Post from \"Types/Post\"\nimport Card from \"./card\"\nimport useInfiniteScroll from \"./useInfiniteScroll\"\nimport { ThumbnailWrapper } from \"./card/centeredImg\"\n\ninterface PostGridProps {\n  posts: Post[]\n}\n\nconst PostGrid: React.FC<PostGridProps> = ({ posts }) => {\n  const scrollEdgeRef = useRef<HTMLDivElement>(null)\n  const currentList = useInfiniteScroll({\n    posts,\n    scrollEdgeRef,\n    maxPostNum: 10,\n    offsetY: 200,\n  })\n\n  return (\n    <Grid role=\"list\">\n      {currentList.map(data => {\n        const { id, slug, title, desc, date, category, tags, thumbnail, alt } = data\n        const ariaLabel = `${title} - ${category} - Posted on ${date}`\n        return (\n          <List key={id} role=\"listitem\">\n            <Link to={slug ?? \"\"} aria-label={ariaLabel}>\n              <Card\n                thumbnail={thumbnail}\n                alt={alt}\n                category={category}\n                title={title}\n                desc={desc}\n                date={date}\n                tags={tags}\n              />\n            </Link>\n          </List>\n        )\n      })}\n      <div ref={scrollEdgeRef} />\n    </Grid>\n  )\n}\n\nconst Grid = styled.ul`\n  display: grid;\n  grid-gap: var(--grid-gap-xl);\n  grid-template-columns: repeat(2, 1fr);\n  list-style: none;\n\n  & > li {\n    margin-bottom: 0;\n  }\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    grid-gap: var(--grid-gap-lg);\n  }\n`\n\nconst List = styled.li`\n  box-sizing: border-box;\n  grid-column: span 1;\n\n  a {\n    display: block;\n    height: 100%;\n  }\n\n  a:hover ${ThumbnailWrapper}::after, a:focus ${ThumbnailWrapper}::after {\n    opacity: 1;\n  }\n\n  & .gatsby-image-wrapper {\n    transition: opacity 1s ease-out, transform 0.5s ease;\n  }\n\n  a:hover,\n  a:focus {\n    .gatsby-image-wrapper {\n      transform: scale(1.03);\n    }\n  }\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    grid-column: span 2;\n  }\n`\n\nexport default PostGrid\n","import PostGrid from \"./postGrid\"\n\nexport default PostGrid\n","import { useLayoutEffect } from \"react\"\n\ninterface UseScrollCenterProps {\n  ref: React.RefObject<HTMLUListElement>\n  targetId: string\n}\n\nconst useScrollCenter = ({ ref, targetId }: UseScrollCenterProps) => {\n  useLayoutEffect(() => {\n    const categoryWrapEl = ref.current\n\n    if (!categoryWrapEl) {\n      return\n    }\n\n    const isScrollActivated =\n      categoryWrapEl.scrollWidth >= categoryWrapEl.offsetWidth\n\n    if (!isScrollActivated) {\n      return\n    }\n\n    const activeCategoryEl = categoryWrapEl.querySelector<HTMLUListElement>(\n      `#${targetId}`\n    )\n\n    if (!activeCategoryEl) {\n      return\n    }\n\n    const offsetX = activeCategoryEl.offsetLeft - categoryWrapEl.offsetLeft\n    categoryWrapEl.scrollTo(\n      offsetX -\n        categoryWrapEl.offsetWidth / 2 +\n        activeCategoryEl.offsetWidth / 2,\n      0\n    )\n  }, [ref, targetId])\n}\n\nexport default useScrollCenter\n","import React, { useRef } from \"react\"\nimport { Link } from \"gatsby\"\nimport type { GatsbyLinkProps } from \"gatsby\"\nimport styled from \"styled-components\"\nimport kebabCase from \"lodash/kebabCase\"\n\nimport type { MarkdownRemarkGroupConnection } from \"Types/GraphQL\"\nimport useScrollCenter from \"./useScrollCenter\"\n\nconst ACTIVE = \"active\"\n\ninterface TagFilterProps {\n  tagList: MarkdownRemarkGroupConnection[],\n  category: String\n}\n\ntype LinkPropsGetter = GatsbyLinkProps<unknown>[\"getProps\"]\n\nconst TagFilter: React.FC<TagFilterProps> = ({ tagList, category }) => {\n  const tagRef = useRef<HTMLUListElement>(null)\n  const ALL_TAG_NAME = \"全部\"\n  const isActive: LinkPropsGetter = ({ isCurrent }) =>\n    isCurrent ? { id: ACTIVE, tabIndex: -1 } : {}\n\n  useScrollCenter({ ref: tagRef, targetId: ACTIVE })\n\n  return (\n    <Nav aria-label=\"Tag Filter\">\n      <TagTitle>分類標籤</TagTitle>\n      <TagButton getProps={isActive} to={`/${category}/`}>\n        {ALL_TAG_NAME}\n      </TagButton>\n      <Divider />\n      <TagUl ref={tagRef} className=\"invisible-scrollbar\">\n        {tagList\n          .sort((a, b) => b.totalCount - a.totalCount)\n          .map(tag => {\n            const { fieldValue } = tag\n            return (\n              <li key={fieldValue}>\n                <TagButton\n                  getProps={isActive}\n                  to={`/${category}/tag/${kebabCase(fieldValue!)}/`}\n                >\n                  {fieldValue}\n                </TagButton>\n              </li>\n            )\n          })}\n      </TagUl>\n    </Nav>\n  )\n}\n\nconst Nav = styled.nav`\n  display: flex;\n  align-items: center;\n  background-color: var(--color-card);\n  margin-bottom: 48px;\n  padding: 12px var(--sizing-md);\n  border-radius: var(--border-radius-base);\n\n  a#active {\n    color: var(--color-white);\n    background-color: var(--color-blue);\n  }\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    padding: 12px;\n  }\n`\n\nconst TagTitle = styled.em`\n  position: static;\n  width: auto;\n  height: auto;\n  clip: auto;\n  white-space: auto;\n\n  flex-shrink: 0;\n  font-size: var(--text-base);\n  font-weight: var(--font-weight-semi-bold);\n  font-style: initial;\n  margin-right: var(--sizing-lg);\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    overflow: hidden;\n    clip: rect(1px, 1px, 1px, 1px);\n    white-space: no-wrap;\n  }\n`\n\nconst TagButton = styled(Link)`\n  cursor: pointer;\n  display: block;\n  background-color: var(--color-tag-button);\n  padding: var(--sizing-sm) var(--sizing-base);\n  border-radius: var(--border-radius-base);\n  font-size: 0.875rem;\n  font-weight: var(--font-weight-semi-bold);\n\n  :focus {\n    outline: none;\n  }\n\n  &:hover {\n    color: var(--color-white);\n    background-color: var(--color-blue);\n  }\n\n  &:focus-visible {\n    color: var(--color-white);\n    background-color: var(--color-blue);\n  }\n`\n\nconst Divider = styled.div`\n  width: 1px;\n  height: 32px;\n  margin: 0 var(--sizing-sm);\n  transform: translateX(-50%);\n  background-color: var(--color-divider);\n`\n\nconst TagUl = styled.ul`\n  display: flex;\n  list-style: none;\n  overflow-x: auto;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n\n  li + li {\n    margin-left: 6px;\n  }\n`\n\nexport default TagFilter\n","import CategoryFilter from \"./tagFilter\"\n\nexport default CategoryFilter\n","import React, { useState, useLayoutEffect } from \"react\"\nimport type { PageProps } from \"gatsby\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport type { Query, MarkdownRemarkFrontmatter } from \"Types/GraphQL\"\nimport type Post from \"Types/Post\"\nimport useSiteMetadata from \"Hooks/useSiteMetadata\"\nimport Layout from \"Layouts/layout\"\nimport SEO from \"Components/seo\"\nimport PostGrid from \"Components/postGrid\"\nimport TagFilter from \"Components/tagFilter\"\n\nconst Home = ({\n  pageContext,\n  data,\n}: PageProps<Query, MarkdownRemarkFrontmatter>) => {\n  const [posts, setPosts] = useState<Post[]>([])\n  const currentTag = pageContext.tag\n  const postData = data.allMarkdownRemark.edges\n\n  useLayoutEffect(() => {\n    const filteredPostData = currentTag\n      ? postData.filter(\n          ({ node }) => node?.frontmatter?.tags.includes(currentTag)\n        )\n      : postData\n\n    filteredPostData.forEach(({ node }) => {\n      const { id } = node\n      const { slug } = node?.fields!\n      const { title, desc, date, category, tags, thumbnail, alt } = node?.frontmatter!\n      const { childImageSharp } = thumbnail!\n\n      setPosts(prevPost => [\n        ...prevPost,\n        {\n          id,\n          slug,\n          title,\n          desc,\n          date,\n          category,\n          tags,\n          thumbnail: childImageSharp?.id,\n          alt,\n        },\n      ])\n    })\n  }, [currentTag, postData])\n\n  const site = useSiteMetadata()\n  const postTitle = currentTag\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <Main>\n        <Content>\n          <TagFilter tagList={data.allMarkdownRemark.group} category=\"music\" />\n          <PostTitle>{postTitle}</PostTitle>\n          <PostGrid posts={posts} />\n        </Content>\n      </Main>\n    </Layout>\n  )\n}\n\nconst Main = styled.main`\n  min-width: var(--min-width);\n  min-height: calc(100vh - var(--nav-height) - var(--footer-height));\n  background-color: var(--color-background);\n`\n\nconst Content = styled.div`\n  box-sizing: content-box;\n  width: 87.5%;\n  max-width: var(--width);\n  padding-top: var(--sizing-lg);\n  padding-bottom: var(--sizing-lg);\n  margin: 0 auto;\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    padding-top: var(--grid-gap-lg);\n    width: 87.5%;\n  }\n`\n\nconst PostTitle = styled.h2`\n  font-size: 2rem;\n  font-weight: var(--font-weight-extra-bold);\n  margin-bottom: var(--sizing-md);\n  line-height: 1.21875;\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    font-size: 1.75rem;\n  }\n`\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/(posts/blog/music)/\" } }\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            category\n            tags\n            date(formatString: \"YYYY-MM-DD\")\n            desc\n            thumbnail {\n              childImageSharp {\n                id\n              }\n              base\n            }\n            alt\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Home\n"],"names":["styled","CenteredImg","src","alt","data","useStaticQuery","image","useMemo","imageSharp","allImageSharp","edges","find","edge","node","id","gatsbyImageData","ThumbnailWrapper","InnerWrapper","G","loading","React","Card","thumbnail","category","title","desc","date","tags","domainDescription","DOMAINS","domain","name","description","tagsDisplay","map","tag","join","Wrapper","Text","Title","Desc","dateTime","theme","device","md","sm","posts","scrollEdgeRef","maxPostNum","offsetY","useState","hasMore","setHasMore","currentList","setCurrentList","isLoading","setIsLoading","observerLoading","setObserverLoading","observer","useRef","useLayoutEffect","length","slice","useEffect","scrollEdgeElem","current","option","rootMargin","threshold","IntersectionObserver","entries","forEach","entry","currentLength","more","nextEdges","isIntersecting","observe","disconnect","Grid","List","useInfiniteScroll","role","slug","ariaLabel","key","Link","to","ref","targetId","categoryWrapEl","scrollWidth","offsetWidth","activeCategoryEl","querySelector","offsetX","offsetLeft","scrollTo","ACTIVE","Nav","TagTitle","TagButton","Divider","TagUl","tagList","tagRef","isActive","isCurrent","tabIndex","useScrollCenter","getProps","className","sort","a","b","totalCount","fieldValue","kebabCase","Main","Content","PostTitle","pageContext","setPosts","currentTag","postData","allMarkdownRemark","filter","frontmatter","includes","fields","childImageSharp","prevPost","useSiteMetadata","postTitle","group"],"sourceRoot":""}