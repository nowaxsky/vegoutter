{"version":3,"file":"component---src-pages-music-tsx-d9e25d7d8aad57c9578a.js","mappings":"yNAoEMA,EAAOC,EAAAA,QAAAA,KAAAA,WAAH,uDAAGA,CAAH,4IAMJC,EAAUD,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,8MAQU,qBAAGE,MAAkBC,OAAOC,EAA5B,IAMjBC,EAAYL,EAAAA,QAAAA,GAAAA,WAAH,4DAAGA,CAAH,4JAMQ,qBAAGE,MAAkBC,OAAOC,EAA5B,IA2CvB,UA5Ha,SAAC,GAGsC,IAFlDE,EAEiD,EAFjDA,YACAC,EACiD,EADjDA,KAEA,GAA0BC,EAAAA,EAAAA,UAAiB,IAApCC,EAAP,KAAcC,EAAd,KACMC,EAAaL,EAAYM,IACzBC,EAAWN,EAAKO,kBAAkBC,OAExCC,EAAAA,EAAAA,kBAAgB,YACWL,EACrBE,EAASI,QACP,kBAAGC,EAAH,EAAGA,KAAH,OAAcA,SAAd,UAAcA,EAAMC,mBAApB,aAAc,EAAmBC,KAAKC,SAASV,EAA/C,IAEFE,GAEaS,SAAQ,YAAe,IAAZJ,EAAW,EAAXA,KAClBK,EAAOL,EAAPK,GACAC,GAASN,aAAjB,EAAiBA,EAAMO,QAAfD,KACR,EAA8DN,aAA9D,EAA8DA,EAAMC,YAA5DO,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,SAAUT,EAArC,EAAqCA,KAAMU,EAA3C,EAA2CA,UAAWC,EAAtD,EAAsDA,IAC9CC,EAAoBF,EAApBE,gBAERtB,GAAS,SAAAuB,GAAQ,wBACZA,GADY,CAEf,CACEV,GAAAA,EACAC,KAAAA,EACAE,MAAAA,EACAC,KAAAA,EACAC,KAAAA,EACAC,SAAAA,EACAT,KAAAA,EACAU,UAAWE,aAAF,EAAEA,EAAiBT,GAC5BQ,IAAAA,IAXa,GAclB,GACF,GAAE,CAACpB,EAAYE,KAEHqB,EAAAA,EAAAA,KAAb,IACMC,EAAYxB,EAElB,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKe,MAAM,SACX,gBAAC3B,EAAD,KACE,gBAACE,EAAD,KACE,gBAAC,IAAD,CAAWmC,QAAS7B,EAAKO,kBAAkBuB,MAAOR,SAAS,UAC3D,gBAACxB,EAAD,KAAY8B,GACZ,gBAAC,IAAD,CAAU1B,MAAOA,MAK1B,C","sources":["webpack://gatsby-starter-apple/./src/pages/music.tsx"],"sourcesContent":["import React, { useState, useLayoutEffect } from \"react\"\nimport type { PageProps } from \"gatsby\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport type { Query, MarkdownRemarkFrontmatter } from \"Types/GraphQL\"\nimport type Post from \"Types/Post\"\nimport useSiteMetadata from \"Hooks/useSiteMetadata\"\nimport Layout from \"Layouts/layout\"\nimport SEO from \"Components/seo\"\nimport PostGrid from \"Components/postGrid\"\nimport TagFilter from \"Components/tagFilter\"\n\nconst Home = ({\n  pageContext,\n  data,\n}: PageProps<Query, MarkdownRemarkFrontmatter>) => {\n  const [posts, setPosts] = useState<Post[]>([])\n  const currentTag = pageContext.tag\n  const postData = data.allMarkdownRemark.edges\n\n  useLayoutEffect(() => {\n    const filteredPostData = currentTag\n      ? postData.filter(\n          ({ node }) => node?.frontmatter?.tags.includes(currentTag)\n        )\n      : postData\n\n    filteredPostData.forEach(({ node }) => {\n      const { id } = node\n      const { slug } = node?.fields!\n      const { title, desc, date, category, tags, thumbnail, alt } = node?.frontmatter!\n      const { childImageSharp } = thumbnail!\n\n      setPosts(prevPost => [\n        ...prevPost,\n        {\n          id,\n          slug,\n          title,\n          desc,\n          date,\n          category,\n          tags,\n          thumbnail: childImageSharp?.id,\n          alt,\n        },\n      ])\n    })\n  }, [currentTag, postData])\n\n  const site = useSiteMetadata()\n  const postTitle = currentTag\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <Main>\n        <Content>\n          <TagFilter tagList={data.allMarkdownRemark.group} category=\"music\" />\n          <PostTitle>{postTitle}</PostTitle>\n          <PostGrid posts={posts} />\n        </Content>\n      </Main>\n    </Layout>\n  )\n}\n\nconst Main = styled.main`\n  min-width: var(--min-width);\n  min-height: calc(100vh - var(--nav-height) - var(--footer-height));\n  background-color: var(--color-background);\n`\n\nconst Content = styled.div`\n  box-sizing: content-box;\n  width: 87.5%;\n  max-width: var(--width);\n  padding-top: var(--sizing-lg);\n  padding-bottom: var(--sizing-lg);\n  margin: 0 auto;\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    padding-top: var(--grid-gap-lg);\n    width: 87.5%;\n  }\n`\n\nconst PostTitle = styled.h2`\n  font-size: 2rem;\n  font-weight: var(--font-weight-extra-bold);\n  margin-bottom: var(--sizing-md);\n  line-height: 1.21875;\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    font-size: 1.75rem;\n  }\n`\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/(posts/blog/music)/\" } }\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            category\n            tags\n            date(formatString: \"YYYY-MM-DD\")\n            desc\n            thumbnail {\n              childImageSharp {\n                id\n              }\n              base\n            }\n            alt\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Home\n"],"names":["Main","styled","Content","theme","device","sm","PostTitle","pageContext","data","useState","posts","setPosts","currentTag","tag","postData","allMarkdownRemark","edges","useLayoutEffect","filter","node","frontmatter","tags","includes","forEach","id","slug","fields","title","desc","date","category","thumbnail","alt","childImageSharp","prevPost","useSiteMetadata","postTitle","tagList","group"],"sourceRoot":""}