{"version":3,"file":"component---src-pages-software-tsx-a1b7980ca5404bd47ea2.js","mappings":"yNAmEMA,EAAOC,EAAAA,QAAAA,KAAAA,WAAH,0DAAGA,CAAH,4IAMJC,EAAUD,EAAAA,QAAAA,IAAAA,WAAH,6DAAGA,CAAH,8MAQU,qBAAGE,MAAkBC,OAAOC,EAA5B,IAMjBC,EAAYL,EAAAA,QAAAA,GAAAA,WAAH,+DAAGA,CAAH,4JAMQ,qBAAGE,MAAkBC,OAAOC,EAA5B,IA0CvB,UA1Ha,SAAC,GAGsC,IAFlDE,EAEiD,EAFjDA,YACAC,EACiD,EADjDA,KAEA,GAA0BC,EAAAA,EAAAA,UAAiB,IAApCC,EAAP,KAAcC,EAAd,KACMC,EAAkBL,EAAYM,SAC9BC,EAAWN,EAAKO,kBAAkBC,OAExCC,EAAAA,EAAAA,kBAAgB,YACWL,EACrBE,EAASI,QACP,kBAAGC,EAAH,EAAGA,KAAH,OAAcA,SAAA,UAAAA,EAAMC,mBAAN,eAAmBP,YAAaD,CAA9C,IAEFE,GAEaO,SAAQ,YAAe,IAAZF,EAAW,EAAXA,KAClBG,EAAOH,EAAPG,GACAC,GAASJ,aAAjB,EAAiBA,EAAMK,QAAfD,KACR,EAAwDJ,aAAxD,EAAwDA,EAAMC,YAAtDK,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,KAAMd,EAA3B,EAA2BA,SAAUe,EAArC,EAAqCA,UAAWC,EAAhD,EAAgDA,IACxCC,EAAoBF,EAApBE,gBAERnB,GAAS,SAAAoB,GAAQ,wBACZA,GADY,CAEf,CACET,GAAAA,EACAC,KAAAA,EACAE,MAAAA,EACAC,KAAAA,EACAC,KAAAA,EACAd,SAAAA,EACAe,UAAWE,aAAF,EAAEA,EAAiBR,GAC5BO,IAAAA,IAVa,GAalB,GACF,GAAE,CAACjB,EAAiBE,IAErB,IAAMkB,GAAOC,EAAAA,EAAAA,KACPC,EAAYtB,GAAmBoB,EAAKE,UAE1C,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKT,MAAM,SACX,gBAACzB,EAAD,KACE,gBAACE,EAAD,KACE,gBAAC,IAAD,CAAgBiC,aAAc3B,EAAKO,kBAAkBqB,MAAOC,cAAc,SAC1E,gBAAC/B,EAAD,KAAY4B,GACZ,gBAAC,IAAD,CAAUxB,MAAOA,MAK1B,C","sources":["webpack://gatsby-starter-apple/./src/pages/software.tsx"],"sourcesContent":["import React, { useState, useLayoutEffect } from \"react\"\nimport type { PageProps } from \"gatsby\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport type { Query, MarkdownRemarkFrontmatter } from \"Types/GraphQL\"\nimport type Post from \"Types/Post\"\nimport useSiteMetadata from \"Hooks/useSiteMetadata\"\nimport Layout from \"Layouts/layout\"\nimport SEO from \"Components/seo\"\nimport PostGrid from \"Components/postGrid\"\nimport CategoryFilter from \"Components/catetgoryFilter\"\n\nconst Home = ({\n  pageContext,\n  data,\n}: PageProps<Query, MarkdownRemarkFrontmatter>) => {\n  const [posts, setPosts] = useState<Post[]>([])\n  const currentCategory = pageContext.category\n  const postData = data.allMarkdownRemark.edges\n\n  useLayoutEffect(() => {\n    const filteredPostData = currentCategory\n      ? postData.filter(\n          ({ node }) => node?.frontmatter?.category === currentCategory\n        )\n      : postData\n\n    filteredPostData.forEach(({ node }) => {\n      const { id } = node\n      const { slug } = node?.fields!\n      const { title, desc, date, category, thumbnail, alt } = node?.frontmatter!\n      const { childImageSharp } = thumbnail!\n\n      setPosts(prevPost => [\n        ...prevPost,\n        {\n          id,\n          slug,\n          title,\n          desc,\n          date,\n          category,\n          thumbnail: childImageSharp?.id,\n          alt,\n        },\n      ])\n    })\n  }, [currentCategory, postData])\n\n  const site = useSiteMetadata()\n  const postTitle = currentCategory || site.postTitle\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <Main>\n        <Content>\n          <CategoryFilter categoryList={data.allMarkdownRemark.group} categoryTitle=\"分類標籤\" />\n          <PostTitle>{postTitle}</PostTitle>\n          <PostGrid posts={posts} />\n        </Content>\n      </Main>\n    </Layout>\n  )\n}\n\nconst Main = styled.main`\n  min-width: var(--min-width);\n  min-height: calc(100vh - var(--nav-height) - var(--footer-height));\n  background-color: var(--color-background);\n`\n\nconst Content = styled.div`\n  box-sizing: content-box;\n  width: 87.5%;\n  max-width: var(--width);\n  padding-top: var(--sizing-lg);\n  padding-bottom: var(--sizing-lg);\n  margin: 0 auto;\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    padding-top: var(--grid-gap-lg);\n    width: 87.5%;\n  }\n`\n\nconst PostTitle = styled.h2`\n  font-size: 2rem;\n  font-weight: var(--font-weight-extra-bold);\n  margin-bottom: var(--sizing-md);\n  line-height: 1.21875;\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    font-size: 1.75rem;\n  }\n`\n\nexport const query1 = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/(posts/blog/software)/\" } }\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            category\n            date(formatString: \"YYYY-MM-DD\")\n            desc\n            thumbnail {\n              childImageSharp {\n                id\n              }\n              base\n            }\n            alt\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Home\n"],"names":["Main","styled","Content","theme","device","sm","PostTitle","pageContext","data","useState","posts","setPosts","currentCategory","category","postData","allMarkdownRemark","edges","useLayoutEffect","filter","node","frontmatter","forEach","id","slug","fields","title","desc","date","thumbnail","alt","childImageSharp","prevPost","site","useSiteMetadata","postTitle","categoryList","group","categoryTitle"],"sourceRoot":""}